#include <iostream>
using namespace std;
using std::cout;

int Sum(int a, int b); //Прототип функции (объявление функции - function declaration)
int Difference(int a, int b);
int Product(int a, int b);
double Quotient(int a, int b);

void main()
{
	setlocale(LC_ALL, "");
	//cout << "Hello Functions" << endl;
	int a, b;
	cout << "Введите два числа: "; cin >> a >> b;
	int c = Sum(a, b); //Использование функции (вызов функции - function call)
	cout << a << " + " << b << " = " << c << endl;
	cout << a << " - " << b << " = " << Difference(a, b) << endl;
	cout << a << " * " << b << " = " << Product(a, b) << endl;
	cout << a << " / " << b << " = " << Quotient(a, b) << endl;
}

int Sum(int a, int b) //Реализация функции (определение функции - function definition)
{
	int c = a + b;
	return c;
}

int Difference(int a, int b)
{
	return a - b;
}

int Product(int a, int b)
{
	return a * b;
}

double Quotient(int a, int b)
{
	return (double)a / b;
}
/*
Функция - это именованная последовательность выражений и других конструкций языка C++, реализующая определенный алгоритм
(возведение числа в степень, вывод массива на экран, сортировка массива, поиск минимального и максимального значения, поиск файла на диске, установка сетевого соединения и т.д).

Функции позволяют сделать код более логичным, понятным и читаемым.
Так же функции позволяют исходный код одной программы разместить в нескольких исходных файлах, что позволяет множеству программистов работать над одной программой.
Функции в других языках программирования еще называют "процедурами".

Прежде чем использовать функцию, её нужно объявить и написать следующим образом:
--------------------------------------------------------------------------
type name (parameters)
{
   ....;
   group-of-statements;
   ....;
   return value;
}
--------------------------------------------------------------------------
type - это тип возвращаемого значения. Любая функция по завершении, возвращает какое-то значение - результат своей работы
Любое значение в языке C++ имеет тип. Этот тип и указывается при объявлении и написании функции. Функция может вернуть значение любого существующего типа.

Есть функции, которые не возвращают никаких значений, поскольку результат их работы и так виден. Например, когда функция выводит что-то на экран или изменяет значение в памяти.
Тип возвращаемого значения таких функций - void.

Если тип возвращаемого значения функции отличен от void, то в её теле обязательно должно быть написано ключевое слово "return" с возвращаемым значением.
Ключевое слово "return" прерывает работу функции, возвращает значение на место вызова и возвращает управление на место вызова.

В void функциях, ключевое слово return писать необязательно, но его можно использовать для того, чтобы прервать работу функции при некоторых обстоятельствах.
В void функциях, return пишется без значения.

Ключевое слово return может вернуть только одно значение или не возвращать никаких значений.

name - это имя функции. Для наименования функции используются такие же идентификаторы, как и для наименования переменных.

parameters - это список принимаемых параметров функции.
Принимаемые параметры - это исходные данные для работы функции. Принимаемые параметры - это самые обычные переменные, объявленные в заголовке функции.
Эти переменные являются локальными для своей функции, то есть удаляются из памяти по завершении функции. Принимаемые параметры доступны только внутри своей функции.

group-of-statements - это тело функции. Как раз тело функции и реализует алгоритм, возложенный на функцию.
В теле функции можно писать всё, что угодно, кроме реализации другой функции.

																		ПРОТОТИП, РЕАЛИЗАЦИЯ, ВЫЗОВ

Прототип функции (объявление функции - function declaration) состоит из заголовка функции и заканчивается точкой с запятой.
Нужен для того, чтобы имя функции, её список принимаемых параметров и тип возвращаемого значения были известны на момент вызова.

Реализация функции состоит из заголовка функции и тела функции и определяет, что делает функция.

Для того, чтобы функция отработала хотя бы раз, её нужно вызвать хотя бы раз.
Один раз написанная функция может быть вызвана сколько угодно раз.
Это позволяет в значительной степени сократить объем исходного кода, сохранив при этом функционал программы.

Основным преимуществом функций является то, что они ведут к повторному использованию кода, а повторное использование кода это то, к чему стремится программирование, сколько оно существует.

																	 Принимаемые и передаваемые параметры

Когда мы пишем прототип или реализацию функции, мы показываем, какие параметры функция принимает
Когда мы вызываем функцию, мы передаем в нее параметры

В функцию можно передать ровно столько параметров, сколько она принимает. В противном случае возникает ошибка на этапе компиляции:
(too few argument in function call) - если в функцию передать меньше параметров, чем она принимает.
(too many arguments in function call) - если в функцию передать больше параметров, чем она принимает.
(Function doesn't take 'N' arguments) - в ином случае возникает ошибка

Но в функцию всё таки можно передать меньше параметров, чем она принимает, благодаря параметрам по умолчанию.

																	  Параметры по умолчанию (default parameters)
Это параметры, у которых есть значения по умолчанию. Например, int Sum (int a, int b, int c = 0);
C = 0 - значение по умолчанию
Значения по умолчанию даются параметрам при объявлении функции. Значение по умолчанию может иметь последний, два последних, три последних и т.д. параметра.
Не может иметь только первый или произвольный параметр в середине списка аргументов. В противном случае, компилятор не сможет понять, куда и какой параметр нужно передать.

Абсолютно все параметры функции могут иметь значение по умолчанию, в таком случае функция может быть вызвана без параметра.
Параметры по умолчанию можно писать только в прототипе функции, в противном случае возникает ошибка на этапе компиляции redefenition of default parameter.
*/